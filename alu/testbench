module alu_tb();
//input
reg [7:0] a,b;
reg [3:0] control;
reg enable;
   
//output
wire [15:0] y;
   
//module instantiation and port declaration
alu dut (.a(a),.b(b),.control(control),.enable(enable),.y(y));
   
//initializing variables
initial
	begin
		{a,b}=0;
	end

task inputs;
	input [7:0] A,B;
	input [3:0] sel;
	begin	
		a=A;
		b=B;
		control=sel;
    enable=1;
		#10;
	end
endtask


initial
	begin
		inputs(8'd20,8'd15,4'b0000); //Add two 8 bit numbers a and b
		inputs(8'd22,8'd11,4'b0001); // Increment a by 1
		inputs(8'd20,8'd15,4'b0010); // Subtracts b from a
		inputs(8'd32,8'd17,4'b0011); // Decrement a by 1
		inputs(8'd10,8'd8,4'b0100); // Multiply 8 bit numbers a and b
		inputs(8'd64,8'd10,4'b0101); // Divide a by b
		inputs(8'd12,8'd45,4'b0110); // Shift a to left side by 1 bit
		inputs(8'd14,8'd52,4'b0111); // Shift a to right by 1 bit
		inputs(8'd24,8'd13,4'b1000); // Logical AND
		inputs(8'd36,8'd16,4'b1001); // Logical OR
		inputs(8'd15,8'd35,4'b1010); // Compement
		inputs(8'd34,8'd25,4'b1011); // Logical NAND
		inputs(8'd25,8'd40,4'b1100); // Logical NOR
		inputs(8'd30,8'd34,4'b1101); // Logical EXOR
		inputs(8'd14,8'd22,4'b1110); // Logical EXNOR
		inputs(8'd60,8'd70,4'b1111); // Buffer
	end
endmodule
